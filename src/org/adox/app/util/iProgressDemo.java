package org.adox.app.util;

import java.awt.GridLayout;
import java.awt.Cursor;
import java.awt.event.*;
import java.util.*;
import java.io.*;
import javax.swing.*;
import java.lang.reflect.InvocationTargetException;
/**
 *
 * @author Adolfo
 */
public class iProgressDemo extends javax.swing.JFrame {

    String startdir;        // directorio de busqueda
    String patt;            // lo que vamos a buscar
    boolean search_flag;    // true si la busqueda esta en progreso
    public iProgressDemo() {
        initComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        dirfield = new javax.swing.JTextField();
        pattfield = new javax.swing.JTextField();
        progbar = new javax.swing.JProgressBar();
        jButton1 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        outarea = new javax.swing.JTextArea();
        fileslab = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("Directorio inicial");

        jLabel2.setText("Patron de busqueda");

        jButton1.setText("Buscar");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        outarea.setColumns(20);
        outarea.setRows(5);
        jScrollPane1.setViewportView(outarea);

        fileslab.setText("ya");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(47, 47, 47)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 370, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addComponent(jLabel1))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(dirfield, javax.swing.GroupLayout.DEFAULT_SIZE, 263, Short.MAX_VALUE)
                            .addComponent(pattfield, javax.swing.GroupLayout.DEFAULT_SIZE, 263, Short.MAX_VALUE)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(progbar, javax.swing.GroupLayout.Alignment.LEADING, 0, 0, Short.MAX_VALUE)
                                    .addComponent(jButton1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 120, Short.MAX_VALUE))
                                .addGap(18, 18, 18)
                                .addComponent(fileslab, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addGap(22, 22, 22))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(81, 81, 81)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel2)
                            .addComponent(pattfield, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(34, 34, 34)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(dirfield, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel1))))
                .addGap(18, 18, 18)
                .addComponent(jButton1)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(progbar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(fileslab))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(14, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
                startdir = dirfield.getText();
                patt = pattfield.getText();
                if (startdir == null
                        || startdir.trim().equals("")
                        || patt == null
                        || patt.trim().equals("")) {
                    JOptionPane.showMessageDialog(
                            this, "Entrada invalida", "Error",
                            JOptionPane.ERROR_MESSAGE);
                } else if (search_flag) {
                    JOptionPane.showMessageDialog(
                            this, "Busqueda en progreso",
                            "Error", JOptionPane.ERROR_MESSAGE);
                } else {
                    search_flag = true;
                    new Buscar().start();
                    //new Search(this,progbar,dirfield,pattfield,startdir,patt).start();
                }
    }//GEN-LAST:event_jButton1ActionPerformed

    class Buscar extends Thread {
         void doUpdate(Runnable r) {
        try {
            SwingUtilities.invokeAndWait(r);
        } catch (InvocationTargetException e1) {
            System.err.println(e1);
        } catch (InterruptedException e2) {
            System.err.println(e2);
        }
    }
    // nos da la lista de los ficheros de un directorio

    void getFileList(File f, List list) {

        // recursividad si hay un directorio dentro del mismo
        if (f.isDirectory()) {
            String entries[] = f.list();
            for (int i = 0; i < entries.length; i++) {
                getFileList(new File(f, entries[i]),
                        list);
            }
        } // para fciheros , se aÃ±aden a la lista y se actualiza la barra de progreso
        else if (f.isFile()) {
            list.add(f.getPath());
            final int size = list.size();
            if (size % 100 != 0) {
                return;
            }
            doUpdate(new Runnable() {

                public void run() {
                    progbar.setValue(size % 1000);
                }
            });
        }
    }

    // comprueba que el fichero contiene la cadena
    boolean fileMatch(String fn, String patt) {
        boolean found = false;

        try {
            FileReader fr = new FileReader(fn);
            BufferedReader br = new BufferedReader(fr);
            String str;
            while ((str = br.readLine()) != null) {
                if (str.indexOf(patt) != -1) {
                    found = true;
                    break;
                }
            }
            br.close();
        } catch (IOException e) {
            System.err.println(e);
        }
        return found;
    }

    // realiza la busqueda
    public void run() {
        List filelist = new ArrayList();
        final String sep =
                System.getProperty("line.separator");

        doUpdate(new Runnable() {

            public void run() {
                outarea.setText("");
                fileslab.setText("");
            }
        });

        // nos da la lista de todos los ficheros y muestra el contador
        getFileList(new File(startdir), filelist);
        final int size = filelist.size();
        doUpdate(new Runnable() {

            public void run() {
                progbar.setValue(0);
                fileslab.setText("Encontrados " + size
                        + " ficheros, buscando ...");
            }
        });

        // configura el monitor de progreso
        final ProgressMonitor pm = new ProgressMonitor(
             null, "Buscando ficheros", "", 0, size - 1);
        pm.setMillisToDecideToPopup(0);
        pm.setMillisToPopup(0);

        // itera entre los ficheros, actualizando el monitor de progreso
        for (int i = 0; i < size; i++) {
            final String fn = (String) filelist.get(i);
            final int curr = i;
            if (pm.isCanceled()) {
                break;
            }
            final boolean b = fileMatch(fn, patt);
            doUpdate(new Runnable() {

                public void run() {
                    pm.setProgress(curr);
                    pm.setNote(fn);
                    if (b) {
                        outarea.append(fn + sep);
                    }
                }
            });
        }

        doUpdate(new Runnable() {

            public void run() {
                pm.close();
                outarea.setCaretPosition(0);
                fileslab.setText("");
            }
        });
        search_flag = false;
    }
    }

    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new iProgressDemo().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField dirfield;
    private javax.swing.JLabel fileslab;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea outarea;
    private javax.swing.JTextField pattfield;
    private javax.swing.JProgressBar progbar;
    // End of variables declaration//GEN-END:variables

}
