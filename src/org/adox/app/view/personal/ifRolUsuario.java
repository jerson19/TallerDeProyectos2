package org.adox.app.view.personal;

import java.awt.EventQueue;
import java.beans.Beans;
import java.util.ArrayList;
import java.util.List;
import javax.persistence.EntityManager;
import javax.persistence.Query;
import javax.persistence.RollbackException;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JTable;
import org.adox.app.entities.Rol;
import org.adox.app.entities.RolUsuario;
import org.adox.app.util.LogsUtil;
import org.adox.app.util.ProgressUtil;
import org.adox.app.view.frmPrincipal;
import org.apache.log4j.Logger;

/**
 * @author ADOLFO
 * ifRoles.java
 * Created on 14/06/2011, 11:16:03 AM
 */
public class ifRolUsuario extends JPanel {

    static Logger oClass = Logger.getLogger("ifRolUsuario");
    private EntityManager entityManager;
    private Query query;
    private Query queryRol;
    private List<RolUsuario> list;
    private List<Rol> rolList;
    private RolUsuario oRolUsuario;
    String idUsuario;

    public ifRolUsuario(String Personal) {
        _initPU();
        initComponents();
        idUsuario = Personal;
        if (!Beans.isDesignTime()) {
            entityManager.getTransaction().begin();
        }
        _init();
        ProgressUtil.stop();
    }

    private void _initPU() {
        entityManager = frmPrincipal.oAplicacionDao.getObtenerConexionPU();
    }

    private void _Persistencia() {
        query = java.beans.Beans.isDesignTime() ? null : entityManager.createQuery("SELECT r FROM RolUsuario r WHERE r.usuario=" + idUsuario);
        list = java.beans.Beans.isDesignTime() ? java.util.Collections.emptyList() : org.jdesktop.observablecollections.ObservableCollections.observableList(query.getResultList());
    }

    private void _PersistenciaRol() {
        queryRol = java.beans.Beans.isDesignTime() ? null : entityManager.createQuery("SELECT r FROM Rol r");
        rolList = java.beans.Beans.isDesignTime() ? java.util.Collections.emptyList() : org.jdesktop.observablecollections.ObservableCollections.observableList(queryRol.getResultList());
    }

    private void _init() {
        RefrescarTablaRol();
        RefrescarTabla();
        activaGuardar(false);
        habilitaCampos(false);
    }

    private void habilitaCampos(boolean valor) {
        usuarioField.setEnabled(valor);
//        claveField.setEnabled(valor);
    }

    private void limpiarCampos() {
        usuarioField.setText("");
        idrolusuarioField.setText("");
        estadoField.setText("");
    }

    private void activaGuardar(boolean valor) {
        saveButton.setEnabled(valor);
        editButton.setEnabled(!valor);
        newButton.setEnabled(!valor);
        deleteButton.setEnabled(!valor);
    }
    //"SELECT r FROM RolUsuario r WHERE r.usuario="+idPersonal
    //S

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        bindingGroup = new org.jdesktop.beansbinding.BindingGroup();

        masterScrollPane = new javax.swing.JScrollPane();
        masterTable = new javax.swing.JTable();
        idrolusuarioLabel = new javax.swing.JLabel();
        rolLabel = new javax.swing.JLabel();
        usuarioLabel = new javax.swing.JLabel();
        estadoLabel = new javax.swing.JLabel();
        idrolusuarioField = new javax.swing.JTextField();
        rolField = new javax.swing.JTextField();
        usuarioField = new javax.swing.JTextField();
        estadoField = new javax.swing.JTextField();
        editButton = new javax.swing.JButton();
        newButton = new javax.swing.JButton();
        deleteButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tablaRoles = new javax.swing.JTable();
        saveButton = new javax.swing.JButton();

        FormListener formListener = new FormListener();

        org.jdesktop.beansbinding.ELProperty eLProperty = org.jdesktop.beansbinding.ELProperty.create("${list}");
        org.jdesktop.swingbinding.JTableBinding jTableBinding = org.jdesktop.swingbinding.SwingBindings.createJTableBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, this, eLProperty, masterTable);
        org.jdesktop.swingbinding.JTableBinding.ColumnBinding columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${idrolusuario}"));
        columnBinding.setColumnName("Idrolusuario");
        columnBinding.setColumnClass(Integer.class);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${rol}"));
        columnBinding.setColumnName("Rol");
        columnBinding.setColumnClass(Integer.class);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${usuario}"));
        columnBinding.setColumnName("Usuario");
        columnBinding.setColumnClass(Integer.class);
        bindingGroup.addBinding(jTableBinding);
        jTableBinding.bind();

        masterTable.addMouseListener(formListener);
        masterScrollPane.setViewportView(masterTable);

        idrolusuarioLabel.setText("Id:");

        rolLabel.setText("Rol:");

        usuarioLabel.setText("Usuario:");

        estadoLabel.setText("Estado:");

        idrolusuarioField.setEditable(false);

        org.jdesktop.beansbinding.Binding binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, masterTable, org.jdesktop.beansbinding.ELProperty.create("${selectedElement.idrolusuario}"), idrolusuarioField, org.jdesktop.beansbinding.BeanProperty.create("text"));
        binding.setSourceUnreadableValue(null);
        bindingGroup.addBinding(binding);
        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ, masterTable, org.jdesktop.beansbinding.ELProperty.create("${selectedElement != null}"), idrolusuarioField, org.jdesktop.beansbinding.BeanProperty.create("enabled"));
        bindingGroup.addBinding(binding);

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, masterTable, org.jdesktop.beansbinding.ELProperty.create("${selectedElement.rol}"), rolField, org.jdesktop.beansbinding.BeanProperty.create("text"));
        binding.setSourceUnreadableValue(null);
        bindingGroup.addBinding(binding);
        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ, masterTable, org.jdesktop.beansbinding.ELProperty.create("${selectedElement != null}"), rolField, org.jdesktop.beansbinding.BeanProperty.create("enabled"));
        bindingGroup.addBinding(binding);

        usuarioField.setEditable(false);

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, masterTable, org.jdesktop.beansbinding.ELProperty.create("${selectedElement.usuario}"), usuarioField, org.jdesktop.beansbinding.BeanProperty.create("text"));
        binding.setSourceUnreadableValue(null);
        bindingGroup.addBinding(binding);
        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ, masterTable, org.jdesktop.beansbinding.ELProperty.create("${selectedElement != null}"), usuarioField, org.jdesktop.beansbinding.BeanProperty.create("enabled"));
        bindingGroup.addBinding(binding);

        estadoField.setEditable(false);

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, masterTable, org.jdesktop.beansbinding.ELProperty.create("${selectedElement.estado}"), estadoField, org.jdesktop.beansbinding.BeanProperty.create("text"));
        binding.setSourceUnreadableValue(null);
        bindingGroup.addBinding(binding);
        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ, masterTable, org.jdesktop.beansbinding.ELProperty.create("${selectedElement != null}"), estadoField, org.jdesktop.beansbinding.BeanProperty.create("enabled"));
        bindingGroup.addBinding(binding);

        editButton.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        editButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/adox/app/resources/imagenes/m_editar.PNG"))); // NOI18N
        editButton.setText("Editar");
        editButton.setName("editButton"); // NOI18N
        editButton.addActionListener(formListener);

        newButton.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        newButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/adox/app/resources/imagenes/m_agregar.png"))); // NOI18N
        newButton.setText("Nuevo");
        newButton.setName("newButton"); // NOI18N
        newButton.addActionListener(formListener);

        deleteButton.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        deleteButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/adox/app/resources/imagenes/m_elimina.png"))); // NOI18N
        deleteButton.setText("Eliminar");
        deleteButton.setName("deleteButton"); // NOI18N
        deleteButton.addActionListener(formListener);

        jScrollPane1.setName("jScrollPane1"); // NOI18N

        tablaRoles.setName("tablaRoles"); // NOI18N

        eLProperty = org.jdesktop.beansbinding.ELProperty.create("${rolList}");
        jTableBinding = org.jdesktop.swingbinding.SwingBindings.createJTableBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, this, eLProperty, tablaRoles);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${idrol}"));
        columnBinding.setColumnName("Idrol");
        columnBinding.setColumnClass(Integer.class);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${rol}"));
        columnBinding.setColumnName("Rol");
        columnBinding.setColumnClass(String.class);
        bindingGroup.addBinding(jTableBinding);
        jTableBinding.bind();
        tablaRoles.addMouseListener(formListener);
        jScrollPane1.setViewportView(tablaRoles);

        saveButton.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        saveButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/adox/app/resources/imagenes/m_guardar.PNG"))); // NOI18N
        saveButton.setText("Guardar");
        saveButton.setName("saveButton"); // NOI18N
        saveButton.addActionListener(formListener);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(rolLabel)
                        .addGap(39, 39, 39)
                        .addComponent(rolField, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(idrolusuarioLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(idrolusuarioField, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(usuarioLabel)
                        .addGap(18, 18, 18)
                        .addComponent(usuarioField, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(estadoLabel)
                        .addGap(21, 21, 21)
                        .addComponent(estadoField, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING, 0, 0, Short.MAX_VALUE)
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                            .addComponent(newButton)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(deleteButton, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(editButton)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(saveButton))
                        .addComponent(masterScrollPane, javax.swing.GroupLayout.Alignment.LEADING, 0, 0, Short.MAX_VALUE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(masterScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(idrolusuarioLabel)
                    .addComponent(idrolusuarioField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(usuarioLabel)
                    .addComponent(usuarioField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(estadoLabel)
                    .addComponent(estadoField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(rolLabel)
                    .addComponent(rolField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(editButton)
                    .addComponent(deleteButton)
                    .addComponent(newButton)
                    .addComponent(saveButton))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        bindingGroup.bind();
    }

    // Code for dispatching events from components to event handlers.

    private class FormListener implements java.awt.event.ActionListener, java.awt.event.MouseListener {
        FormListener() {}
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            if (evt.getSource() == editButton) {
                ifRolUsuario.this.editButtonActionPerformed(evt);
            }
            else if (evt.getSource() == newButton) {
                ifRolUsuario.this.newButtonActionPerformed(evt);
            }
            else if (evt.getSource() == deleteButton) {
                ifRolUsuario.this.deleteButtonActionPerformed(evt);
            }
            else if (evt.getSource() == saveButton) {
                ifRolUsuario.this.saveButtonActionPerformed(evt);
            }
        }

        public void mouseClicked(java.awt.event.MouseEvent evt) {
            if (evt.getSource() == masterTable) {
                ifRolUsuario.this.masterTableMouseClicked(evt);
            }
            else if (evt.getSource() == tablaRoles) {
                ifRolUsuario.this.tablaRolesMouseClicked(evt);
            }
        }

        public void mouseEntered(java.awt.event.MouseEvent evt) {
        }

        public void mouseExited(java.awt.event.MouseEvent evt) {
        }

        public void mousePressed(java.awt.event.MouseEvent evt) {
        }

        public void mouseReleased(java.awt.event.MouseEvent evt) {
        }
    }// </editor-fold>//GEN-END:initComponents

    private void editButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editButtonActionPerformed
        Editar();
}//GEN-LAST:event_editButtonActionPerformed

    private void newButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newButtonActionPerformed
        Nuevo();
}//GEN-LAST:event_newButtonActionPerformed

    private void deleteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteButtonActionPerformed
        Eliminar();
}//GEN-LAST:event_deleteButtonActionPerformed

    private void masterTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_masterTableMouseClicked
        //
    }//GEN-LAST:event_masterTableMouseClicked

    private void tablaRolesMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tablaRolesMouseClicked
        selecionarRol();

    }//GEN-LAST:event_tablaRolesMouseClicked

    private void saveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveButtonActionPerformed
        Guardar();
    }//GEN-LAST:event_saveButtonActionPerformed
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton deleteButton;
    private javax.swing.JButton editButton;
    private javax.swing.JTextField estadoField;
    private javax.swing.JLabel estadoLabel;
    private javax.swing.JTextField idrolusuarioField;
    private javax.swing.JLabel idrolusuarioLabel;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane masterScrollPane;
    private javax.swing.JTable masterTable;
    private javax.swing.JButton newButton;
    private javax.swing.JTextField rolField;
    private javax.swing.JLabel rolLabel;
    private javax.swing.JButton saveButton;
    private javax.swing.JTable tablaRoles;
    private javax.swing.JTextField usuarioField;
    private javax.swing.JLabel usuarioLabel;
    private org.jdesktop.beansbinding.BindingGroup bindingGroup;
    // End of variables declaration//GEN-END:variables

    //METODOS DE LA APLICACION
    private void personalizarJBotones() {
        deleteButton.setEnabled(false);
        saveButton.setEnabled(false);
    }

    private void personalizarJtable() {
        masterTable.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
        masterTable.getColumnModel().getColumn(0).setResizable(true);
        masterTable.getColumnModel().getColumn(0).setPreferredWidth(150);
        masterTable.getColumnModel().getColumn(1).setResizable(true);
        masterTable.getColumnModel().getColumn(1).setPreferredWidth(150);
    }

    // METODOS DEL MANTENIMIENTO
    public void Nuevo() {
        oRolUsuario = new RolUsuario();
        list.add(oRolUsuario);
        int row = list.size() - 1;
        masterTable.setRowSelectionInterval(row, row);
        masterTable.scrollRectToVisible(masterTable.getCellRect(row, 0, true));
        habilitaCampos(true);
        limpiarCampos();
        activaGuardar(true);
        usuarioField.setText(idUsuario);
        estadoField.setText("1");
    }

    private void Editar() {
        habilitaCampos(true);
        activaGuardar(true);
        oRolUsuario = new RolUsuario();
        int row = masterTable.getSelectedRow();
        System.out.println("fila seleccionada " + row);
        oRolUsuario = list.get(row);
    }

    public void Guardar() {
        LogsUtil.Show(oClass, "METODO: Guardar Rol Usuario");
        if (usuarioField.getText().trim().length() == 0) {
            JOptionPane.showMessageDialog(this, "SLECCIONE USUARIO");
            return;
        }
        if (rolField.getText().trim().length() == 0) {
            JOptionPane.showMessageDialog(this, "SLECCIONE ROL");
            return;
        }
        usuarioField.setText(usuarioField.getText().trim().toUpperCase());
        int rpta = JOptionPane.showConfirmDialog(this, "Esta Seguro de Guardar el Registro", "Atención", JOptionPane.YES_NO_OPTION);
        if (rpta == 0) {
            try {
                if (entityManager.getTransaction().isActive()) {
                    entityManager.persist(oRolUsuario);
                    entityManager.getTransaction().commit();
                    entityManager.getTransaction().begin();
                } else {
                    entityManager.getTransaction().begin();
                    entityManager.persist(oRolUsuario);
                    entityManager.getTransaction().commit();
                    entityManager.getTransaction().begin();
                }
            } catch (RollbackException rex) {
                LogsUtil.Show(oClass, "ERROR : Al guardar los roles del usuario " + rex.getMessage());
                if (!entityManager.getTransaction().isActive()) {
                    entityManager.getTransaction().begin();
                }
                List<org.adox.app.entities.RolUsuario> merged = new ArrayList<org.adox.app.entities.RolUsuario>(list.size());
                for (org.adox.app.entities.RolUsuario a : list) {
                    merged.add(entityManager.merge(a));
                }
                list.clear();
                list.addAll(merged);
            }
        } else {
            LogsUtil.Show(oClass, "Cancelo la operacion");
        }
        Actualizar();
    }

    private void Actualizar() {
        LogsUtil.Show(oClass, "METODO: Actualizar Rol Usuario");
        entityManager.getTransaction().rollback();
        entityManager.getTransaction().begin();
        java.util.Collection data = query.getResultList();
        for (Object entity : data) {
            entityManager.refresh(entity);
        }
        list.clear();
        list.addAll(data);
        limpiarCampos();
        activaGuardar(false);
        habilitaCampos(false);
    }

    private void Eliminar() {
        if (usuarioField.getText().trim().length() == 0) {
            JOptionPane.showMessageDialog(this, "SLECCIONE USUARIO");
            return;
        }
        if (rolField.getText().trim().length() == 0) {
            JOptionPane.showMessageDialog(this, "SLECCIONE ROL");
            return;
        }
        int rpta = JOptionPane.showConfirmDialog(this, "Esta Seguro de Eliminar el Registro", "Atención", JOptionPane.YES_NO_OPTION);
        if (rpta == 0) {
            int[] selected = masterTable.getSelectedRows();
            List<org.adox.app.entities.RolUsuario> toRemove = new ArrayList<org.adox.app.entities.RolUsuario>(selected.length);
            for (int idx = 0; idx < selected.length; idx++) {
                org.adox.app.entities.RolUsuario a = list.get(masterTable.convertRowIndexToModel(selected[idx]));
                toRemove.add(a);
                entityManager.remove(a);
            }
            list.removeAll(toRemove);
            //GUARDAR            
            if (entityManager.getTransaction().isActive()) {
                entityManager.getTransaction().commit();
                entityManager.getTransaction().begin();
            } else {
                entityManager.getTransaction().begin();
                entityManager.getTransaction().commit();
                entityManager.getTransaction().begin();
            }
        } else {
            System.out.println("Cancelo la operacion");
        }
    }

    private void RefrescarTabla() {
        _Persistencia();
        org.jdesktop.swingbinding.JTableBinding jTableBinding = org.jdesktop.swingbinding.SwingBindings.createJTableBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, list, masterTable);
        org.jdesktop.swingbinding.JTableBinding.ColumnBinding columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${idrolusuario}"));
        columnBinding.setColumnName("Idrolusuario");
        columnBinding.setColumnClass(Integer.class);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${rol}"));
        columnBinding.setColumnName("Rol");
        columnBinding.setColumnClass(Integer.class);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${usuario}"));
        columnBinding.setColumnName("Usuario");
        columnBinding.setColumnClass(Integer.class);
        bindingGroup.addBinding(jTableBinding);
        jTableBinding.bind();
        masterScrollPane.setViewportView(masterTable);
        bindingGroup.bind();
        personalizarJtable();
    }

    private void RefrescarTablaRol() {
        _PersistenciaRol();
        org.jdesktop.swingbinding.JTableBinding jTableBinding = org.jdesktop.swingbinding.SwingBindings.createJTableBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, rolList, tablaRoles);
        org.jdesktop.swingbinding.JTableBinding.ColumnBinding columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${idrol}"));
        columnBinding.setColumnName("Idrol");
        columnBinding.setColumnClass(Integer.class);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${rol}"));
        columnBinding.setColumnName("Rol");
        columnBinding.setColumnClass(String.class);
        bindingGroup.addBinding(jTableBinding);
        jTableBinding.bind();
        jScrollPane1.setViewportView(tablaRoles);
        bindingGroup.bind();
    }

    public List<RolUsuario> getList() {
        return list;
    }

    public void setList(List<RolUsuario> list) {
        this.list = list;
    }

    public List<Rol> getRolList() {
        return rolList;
    }

    public void setRolList(List<Rol> rolList) {
        this.rolList = rolList;
    }

    private void selecionarRol() {
        deleteButton.setEnabled(true);
        rolField.setText(tablaRoles.getValueAt(tablaRoles.getSelectedRow(), 0).toString());
    }
}
